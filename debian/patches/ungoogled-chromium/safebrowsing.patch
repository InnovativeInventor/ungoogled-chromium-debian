# Additional changes for disabling SafeBrowsing

--- a/content/browser/native_file_system/mock_native_file_system_permission_context.cc
+++ b/content/browser/native_file_system/mock_native_file_system_permission_context.cc
@@ -31,12 +31,4 @@
                                    frame_id, callback);
 }
 
-void MockNativeFileSystemPermissionContext::PerformAfterWriteChecks(
-    std::unique_ptr<NativeFileSystemWriteItem> item,
-    int process_id,
-    int frame_id,
-    base::OnceCallback<void(AfterWriteCheckResult)> callback) {
-  PerformAfterWriteChecks_(item.get(), process_id, frame_id, callback);
-}
-
 }  // namespace content
--- a/content/browser/native_file_system/mock_native_file_system_permission_context.h	2020-06-23 06:52:53.150229634 -0500
+++ b/content/browser/native_file_system/mock_native_file_system_permission_context.h	2020-06-23 09:16:11.365772880 -0500
@@ -63,17 +63,6 @@
            int frame_id,
            base::OnceCallback<void(SensitiveDirectoryResult)>& callback));
 
-  void PerformAfterWriteChecks(
-      std::unique_ptr<NativeFileSystemWriteItem> item,
-      int process_id,
-      int frame_id,
-      base::OnceCallback<void(AfterWriteCheckResult)> callback) override;
-  MOCK_METHOD4(PerformAfterWriteChecks_,
-               void(NativeFileSystemWriteItem* item,
-                    int process_id,
-                    int frame_id,
-                    base::OnceCallback<void(AfterWriteCheckResult)>& callback));
-
   MOCK_METHOD1(CanObtainWritePermission, bool(const url::Origin& origin));
 };
 
