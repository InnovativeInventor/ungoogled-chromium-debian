--- a/ui/gfx/x/gen_xproto.py
+++ b/ui/gfx/x/gen_xproto.py
@@ -849,7 +849,7 @@ class GenXproto:
 
         self.resolve_element(t.elt, fields)
 
-        for field in fields.values():
+        for field in list(fields.values()):
             field.parent = t
             field.for_list = None
             if field.type.is_switch or field.type.is_case_or_bitcase:
@@ -858,10 +858,80 @@ class GenXproto:
                 self.resolve_type(field.type.member, field.type.member.name)
                 expr = field.type.expr
                 if not expr.op and expr.lenfield_name in fields:
+                    if expr.lenfield_name == "num_stops" and field.field_name == "colors":
+                        break
                     fields[expr.lenfield_name].for_list = field
             else:
                 self.resolve_type(field.type, field.type.name)
 
+        # Fix up to produce the same output as python 2
+        def fix_field(key, fields):
+            if key in fields.keys():
+                fields[key].for_list = None
+        for key in ("driver_name_length","device_name_length","num_buffers","num_providers","data_len","str_len","gl_str_len","num_mask","num_keys","num_crtcs","num_depths","num_visuals","num_filters","num_types","num_clients","num_screens","num_classes","num_devices","num_barriers","num_modifiers","num_attributes","num_all_classes","num_this_classes","num_possible_modes","num_possible_outputs","client_driver_name_len","device_private_size","vendor_length","nbytes","map_size","buttons_len","mask_len","pending_len","current_len","pending_nparams","current_nparams","nOutput","nRates","ids_len","rectangles_len","privsize","selections_len","data_context_len","object_context_len","num_encodings","name_size","data_size","num_adaptors","address_len","atoms_len","dashes_len","string_len","cmaps_len","colors_len","authorization_protocol_name_len","authorization_protocol_data_len","reason_len","vendor_len","roots_len","allowed_depths_len","printerNameLen","stringLen","descLen","nSyms","nKeymaps","nSIRtrn","nSymbols","nGeometries","nOutlines","nKeys","nIndicators","size","num_cross_references","num_sizes","modecount"):
+            fix_field(key, fields)
+        if len(name) >= 2:
+            if name[1] == "ListFonts":
+                fix_field("names_len", fields)
+            if name[1] == "GetPointerMapping":
+                fix_field("map_len", fields)
+        if len(name) >= 3:
+            if name[2] == "RenderMode":
+                fix_field("n", fields)
+            if name[2] == "GetString":
+                fix_field("n", fields)
+            if name[2] == "AreTexturesResident":
+                fix_field("n", fields)
+            if name[2] == "DeleteTextures":
+                fix_field("n", fields)
+            if name[2] == "DeleteQueriesARB":
+                fix_field("n", fields)
+            if name[2] == "InputState":
+                fix_field("num_valuators", fields)
+            if name[2] == "DeviceResolutionCtl":
+                fix_field("num_valuators", fields)
+            if name[2] == "ButtonClass":
+                fix_field("num_buttons", fields)
+            if name[2] == "DeviceName":
+                fix_field("len", fields)
+            if name[2] == "KeyType":
+                fix_field("nMapEntries", fields)
+            if name[2] == "DeviceState":
+                fix_field("num_buttons", fields)
+            if name[2] == "FeedbackCtl":
+                fix_field("num_keysyms", fields)
+            if name[2] == "SetDeviceInfo":
+                fix_field("nDeviceLedFBs", fields)
+            if name[2] == "InputInfo":
+                fix_field("axes_len", fields)
+            if name[2] == "GetScreenResources":
+                fix_field("names_len", fields)
+            if name[2] == "GetScreenResourcesCurrent":
+                fix_field("names_len", fields)
+            if name[2] == "PrintGetOneAttributes":
+                fix_field("nameLen", fields)
+            if name[2] == "PRINTER":
+                fix_field("nameLen", fields)
+            if name[2] == "ListSurfaceTypes":
+                fix_field("num", fields)
+            if name[2] == "DeviceValuator":
+                fix_field("num_valuators", fields)
+            if name[2] == "ValuatorState":
+                fix_field("num_valuators", fields)
+            if name[2] == "SetDeviceValuators":
+                fix_field("num_valuators", fields)
+            if name[2] == "ClientInfo":
+                fix_field("num_ranges", fields)
+            if name[2] == "SetPictureFilter":
+                fix_field("filter_len", fields)
+            if name[2] == "ListDeviceProperties":
+                fix_field("num_atoms", fields)
+            if name[2] == "GetOutputInfo":
+                fix_field("name_len", fields)
+                fix_field("num_modes", fields)
+            if name[2] == "CreateLease":
+                fix_field("num_outputs", fields)
+
         if isinstance(t, self.xcbgen.xtypes.Request) and t.reply:
             self.resolve_type(t.reply, t.reply.name)
 
